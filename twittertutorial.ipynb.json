{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import the necessary package to process data in JSON format\n",
    "try:\n",
    "    import json\n",
    "except ImportError:\n",
    "    import simplejson as json"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import the tweepy library\n",
    "import tweepy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Variables that contains the user credentials to access Twitter API \n",
    "ACCESS_TOKEN = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'\n",
    "ACCESS_SECRET = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'\n",
    "CONSUMER_KEY = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'\n",
    "CONSUMER_SECRET = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Setup tweepy to authenticate with Twitter credentials:\n",
    "\n",
    "auth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)\n",
    "auth.set_access_token(ACCESS_TOKEN, ACCESS_SECRET)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create the api to connect to twitter with your creadentials\n",
    "api = tweepy.API(auth, wait_on_rate_limit=True, wait_on_rate_limit_notify=True, compression=True)\n",
    "#--------------------------------------------------------------------------------------------------------------------------\n",
    "# wait_on_rate_limit= True;  will make the api to automatically wait for rate limits to replenish\n",
    "# wait_on_rate_limit_notify= Ture;  will make the api  to print a notification when Tweepyis waiting for rate limits to replenish\n",
    "#--------------------------------------------------------------------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#--------------------------------------------------------------------------------------------------------------------------\n",
    "# The following loop will print most recent statuses, including retweets, posted by the authenticating user and that user’s friends. \n",
    "# This is the equivalent of /timeline/home on the Web.\n",
    "#--------------------------------------------------------------------------------------------------------------------------\n",
    "\n",
    "for status in tweepy.Cursor(api.home_timeline).items(200):\n",
    "\tprint(status._json)\n",
    "#--------------------------------------------------------------------------------------------------------------------------\n",
    "# Twitter API development use pagination for Iterating through timelines, user lists, direct messages, etc. \n",
    "# To help make pagination easier and Tweepy has the Cursor object.\n",
    "#--------------------------------------------------------------------------------------------------------------------------\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "#--------------------------------------------------------------------------------------------------------------------------\n",
    "# The following loop will save the most recent statuses, including retweets, posted by the\n",
    "# authenticating user and that user’s friends to twitter_stream_200tweets.txt file\n",
    "# \n",
    "#--------------------------------------------------------------------------------------------------------------------------\n",
    "fout=open(\"twitter_stream_200tweets.txt\",'w')\n",
    "for status in tweepy.Cursor(api.home_timeline).items(200):\n",
    "\tfout.write(json.dumps(status._json)+\"\\n\")\n",
    "fout.close()\n",
    "#--------------------------------------------------------------------------------------------------------------------------\n",
    "# Twitter API development use pagination for Iterating through timelines, user lists, direct messages, etc. \n",
    "# To help make pagination easier and Tweepy has the Cursor object.\n",
    "#--------------------------------------------------------------------------------------------------------------------------\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#--------------------------------------------------------------------------------------------------------------------------\n",
    "# create the StreamListener to override tweepy.StreamListener, so that all the text in the twitter stream \n",
    "# are printed on screen\n",
    "#--------------------------------------------------------------------------------------------------------------------------\n",
    "\n",
    "\n",
    "class StreamListener(tweepy.StreamListener):\n",
    "\n",
    "    def on_status(self, status):\n",
    "        print(status.text)\n",
    "        \n",
    "    def on_error(self, status_code):\n",
    "        if status_code == 420:\n",
    "            return False\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#--------------------------------------------------------------------------------------------------------------------------\n",
    "# get the tweets in English that include the term \"Google\":\n",
    "#--------------------------------------------------------------------------------------------------------------------------\n",
    "\n",
    "\n",
    "stream_listener = StreamListener()\n",
    "stream = tweepy.Stream(auth=api.auth, listener=stream_listener)\n",
    "stream.filter(track=[\"google\"],languages=[\"en\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# use the streaming api to get tweets by a specific user (with user id 2211149702).\n",
    "# https://tweeterid.com/ can be used to conver user_id to user_name and vice versa\n",
    "stream = tweepy.Stream(auth=api.auth, listener=stream_listener)\n",
    "stream.filter(follow=[\"2211149702\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We use the file saved from last step as example\n",
    "tweets_filename = 'twitter_stream_200tweets.txt'\n",
    "tweets_file = open(tweets_filename, \"r\")\n",
    "\n",
    "\n",
    "for line in tweets_file:\n",
    "    try:\n",
    "        # Read in one line of the file, convert it into a json object \n",
    "        tweet = json.loads(line.strip())\n",
    "        if 'text' in tweet: # only messages contains 'text' field is a tweet\n",
    "            print(tweet['id']) # This is the tweet's id\n",
    "            print(tweet['created_at']) # when the tweet posted\n",
    "            print(tweet['text']) # content of the tweet\n",
    "                        \n",
    "            print(tweet['user']['id']) # id of the user who posted the tweet\n",
    "            print(tweet['user']['name']) # name of the user, e.g. \"Wei Xu\"\n",
    "            print(tweet['user']['screen_name']) # name of the user account, e.g. \"cocoweixu\"\n",
    "\n",
    "            hashtags = []\n",
    "            for hashtag in tweet['entities']['hashtags']:\n",
    "                hashtags.append(hashtag['text'])\n",
    "            print(hashtags)\n",
    "\n",
    "    except:\n",
    "        # read in a line is not in JSON format (sometimes error occured)\n",
    "        continue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Search for latest tweets about \"#nlproc\"\n",
    "\n",
    "tweets = tweepy.Cursor(api.search, q='#nlproc')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Search for latest 10 tweets about \"#nlproc\"\n",
    "tweets = tweepy.Cursor(api.search, q='#nlproc', count=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Search for english tweets about \"#nlproc\"\n",
    "tweets = tweepy.Cursor(api.search, q='#nlproc', lang='en')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#iterate over the tweets returned by cursor obeject\n",
    "for tweet in tweets.items():\n",
    "    print(tweet._json)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'name': 'Worldwide', 'placeType': {'code': 19, 'name': 'Supername'}, 'url': 'http://where.yahooapis.com/v1/place/1', 'parentid': 0, 'country': '', 'woeid': 1, 'countryCode': None}\n"
     ]
    }
   ],
   "source": [
    "# Get all the locations where Twitter provides trends service\n",
    "world_trends = api.trends_available()\n",
    "print(world_trends[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\n",
      "    {\n",
      "        \"trends\": [\n",
      "            {\n",
      "                \"name\": \"#shipwreckSF\",\n",
      "                \"url\": \"http://twitter.com/search?q=%23shipwreckSF\",\n",
      "                \"promoted_content\": null,\n",
      "                \"query\": \"%23shipwreckSF\",\n",
      "                \"tweet_volume\": null\n",
      "            },\n",
      "            {\n",
      "                \"name\": \"Nick Mullens\",\n",
      "                \"url\": \"http://twitter.com/search?q=%22Nick+Mullens%22\",\n",
      "                \"promoted_content\": null,\n",
      "                \"query\": \"%22Nick+Mullens%22\",\n",
      "                \"tweet_volume\": 40163\n",
      "            },\n",
      "            {\n",
      "                \"name\": \"#LAFCvRSL\",\n",
      "                \"url\": \"http://twitter.com/search?q=%23LAFCvRSL\",\n",
      "                \"promoted_content\": null,\n",
      "                \"query\": \"%23LAFCvRSL\",\n",
      "                \"tweet_volume\": null\n",
      "            },\n",
      "            {\n",
      "                \"name\": \"#HTGAWM\",\n",
      "                \"url\": \"http://twitter.com/search?q=%23HTGAWM\",\n",
      "                \"promoted_content\": null,\n",
      "                \"query\": \"%23HTGAWM\",\n",
      "                \"tweet_volume\": 19986\n",
      "            },\n",
      "            {\n",
      "                \"name\": \"#DCvCLB\",\n",
      "                \"url\": \"http://twitter.com/search?q=%23DCvCLB\",\n",
      "                \"promoted_content\": null,\n",
      "                \"query\": \"%23DCvCLB\",\n",
      "                \"tweet_volume\": null\n",
      "            },\n",
      "            {\n",
      "                \"name\": \"Temple\",\n",
      "                \"url\": \"http://twitter.com/search?q=Temple\",\n",
      "                \"promoted_content\": null,\n",
      "                \"query\": \"Temple\",\n",
      "                \"tweet_volume\": 62000\n",
      "            },\n",
      "            {\n",
      "                \"name\": \"#GreysAnatomy\",\n",
      "                \"url\": \"http://twitter.com/search?q=%23GreysAnatomy\",\n",
      "                \"promoted_content\": null,\n",
      "                \"query\": \"%23GreysAnatomy\",\n",
      "                \"tweet_volume\": 25442\n",
      "            },\n",
      "            {\n",
      "                \"name\": \"Julius Randle\",\n",
      "                \"url\": \"http://twitter.com/search?q=%22Julius+Randle%22\",\n",
      "                \"promoted_content\": null,\n",
      "                \"query\": \"%22Julius+Randle%22\",\n",
      "                \"tweet_volume\": null\n",
      "            },\n",
      "            {\n",
      "                \"name\": \"George Kittle\",\n",
      "                \"url\": \"http://twitter.com/search?q=%22George+Kittle%22\",\n",
      "                \"promoted_content\": null,\n",
      "                \"query\": \"%22George+Kittle%22\",\n",
      "                \"tweet_volume\": null\n",
      "            },\n",
      "            {\n",
      "                \"name\": \"Nick Rimando\",\n",
      "                \"url\": \"http://twitter.com/search?q=%22Nick+Rimando%22\",\n",
      "                \"promoted_content\": null,\n",
      "                \"query\": \"%22Nick+Rimando%22\",\n",
      "                \"tweet_volume\": null\n",
      "            },\n",
      "            {\n",
      "                \"name\": \"De'Aaron Fox\",\n",
      "                \"url\": \"http://twitter.com/search?q=%22De%27Aaron+Fox%22\",\n",
      "                \"promoted_content\": null,\n",
      "                \"query\": \"%22De%27Aaron+Fox%22\",\n",
      "                \"tweet_volume\": 13445\n",
      "            },\n",
      "            {\n",
      "                \"name\": \"Mostert\",\n",
      "                \"url\": \"http://twitter.com/search?q=Mostert\",\n",
      "                \"promoted_content\": null,\n",
      "                \"query\": \"Mostert\",\n",
      "                \"tweet_volume\": null\n",
      "            },\n",
      "            {\n",
      "                \"name\": \"Metro Boomin\",\n",
      "                \"url\": \"http://twitter.com/search?q=%22Metro+Boomin%22\",\n",
      "                \"promoted_content\": null,\n",
      "                \"query\": \"%22Metro+Boomin%22\",\n",
      "                \"tweet_volume\": 10097\n",
      "            },\n",
      "            {\n",
      "                \"name\": \"Bol Bol\",\n",
      "                \"url\": \"http://twitter.com/search?q=%22Bol+Bol%22\",\n",
      "                \"promoted_content\": null,\n",
      "                \"query\": \"%22Bol+Bol%22\",\n",
      "                \"tweet_volume\": null\n",
      "            },\n",
      "            {\n",
      "                \"name\": \"Jeff Carter\",\n",
      "                \"url\": \"http://twitter.com/search?q=%22Jeff+Carter%22\",\n",
      "                \"promoted_content\": null,\n",
      "                \"query\": \"%22Jeff+Carter%22\",\n",
      "                \"tweet_volume\": null\n",
      "            },\n",
      "            {\n",
      "                \"name\": \"Evan Turner\",\n",
      "                \"url\": \"http://twitter.com/search?q=%22Evan+Turner%22\",\n",
      "                \"promoted_content\": null,\n",
      "                \"query\": \"%22Evan+Turner%22\",\n",
      "                \"tweet_volume\": null\n",
      "            },\n",
      "            {\n",
      "                \"name\": \"Giannis\",\n",
      "                \"url\": \"http://twitter.com/search?q=Giannis\",\n",
      "                \"promoted_content\": null,\n",
      "                \"query\": \"Giannis\",\n",
      "                \"tweet_volume\": 10501\n",
      "            },\n",
      "            {\n",
      "                \"name\": \"Marcus Morris\",\n",
      "                \"url\": \"http://twitter.com/search?q=%22Marcus+Morris%22\",\n",
      "                \"promoted_content\": null,\n",
      "                \"query\": \"%22Marcus+Morris%22\",\n",
      "                \"tweet_volume\": null\n",
      "            },\n",
      "            {\n",
      "                \"name\": \"Annalise\",\n",
      "                \"url\": \"http://twitter.com/search?q=Annalise\",\n",
      "                \"promoted_content\": null,\n",
      "                \"query\": \"Annalise\",\n",
      "                \"tweet_volume\": null\n",
      "            },\n",
      "            {\n",
      "                \"name\": \"Eric Bledsoe\",\n",
      "                \"url\": \"http://twitter.com/search?q=%22Eric+Bledsoe%22\",\n",
      "                \"promoted_content\": null,\n",
      "                \"query\": \"%22Eric+Bledsoe%22\",\n",
      "                \"tweet_volume\": null\n",
      "            },\n",
      "            {\n",
      "                \"name\": \"NOT ALL HEROES WEAR CAPES\",\n",
      "                \"url\": \"http://twitter.com/search?q=%22NOT+ALL+HEROES+WEAR+CAPES%22\",\n",
      "                \"promoted_content\": null,\n",
      "                \"query\": \"%22NOT+ALL+HEROES+WEAR+CAPES%22\",\n",
      "                \"tweet_volume\": 16096\n",
      "            },\n",
      "            {\n",
      "                \"name\": \"Lindblom\",\n",
      "                \"url\": \"http://twitter.com/search?q=Lindblom\",\n",
      "                \"promoted_content\": null,\n",
      "                \"query\": \"Lindblom\",\n",
      "                \"tweet_volume\": null\n",
      "            },\n",
      "            {\n",
      "                \"name\": \"Horford\",\n",
      "                \"url\": \"http://twitter.com/search?q=Horford\",\n",
      "                \"promoted_content\": null,\n",
      "                \"query\": \"Horford\",\n",
      "                \"tweet_volume\": null\n",
      "            },\n",
      "            {\n",
      "                \"name\": \"Real Salt Lake\",\n",
      "                \"url\": \"http://twitter.com/search?q=%22Real+Salt+Lake%22\",\n",
      "                \"promoted_content\": null,\n",
      "                \"query\": \"%22Real+Salt+Lake%22\",\n",
      "                \"tweet_volume\": null\n",
      "            },\n",
      "            {\n",
      "                \"name\": \"#JusticeForDanyeJones\",\n",
      "                \"url\": \"http://twitter.com/search?q=%23JusticeForDanyeJones\",\n",
      "                \"promoted_content\": null,\n",
      "                \"query\": \"%23JusticeForDanyeJones\",\n",
      "                \"tweet_volume\": null\n",
      "            },\n",
      "            {\n",
      "                \"name\": \"#MyBiggestWorryInThe90s\",\n",
      "                \"url\": \"http://twitter.com/search?q=%23MyBiggestWorryInThe90s\",\n",
      "                \"promoted_content\": null,\n",
      "                \"query\": \"%23MyBiggestWorryInThe90s\",\n",
      "                \"tweet_volume\": null\n",
      "            },\n",
      "            {\n",
      "                \"name\": \"#CrewSC\",\n",
      "                \"url\": \"http://twitter.com/search?q=%23CrewSC\",\n",
      "                \"promoted_content\": null,\n",
      "                \"query\": \"%23CrewSC\",\n",
      "                \"tweet_volume\": null\n",
      "            },\n",
      "            {\n",
      "                \"name\": \"#BreakingPointSVU\",\n",
      "                \"url\": \"http://twitter.com/search?q=%23BreakingPointSVU\",\n",
      "                \"promoted_content\": null,\n",
      "                \"query\": \"%23BreakingPointSVU\",\n",
      "                \"tweet_volume\": null\n",
      "            },\n",
      "            {\n",
      "                \"name\": \"#TheLastRocket\",\n",
      "                \"url\": \"http://twitter.com/search?q=%23TheLastRocket\",\n",
      "                \"promoted_content\": null,\n",
      "                \"query\": \"%23TheLastRocket\",\n",
      "                \"tweet_volume\": null\n",
      "            },\n",
      "            {\n",
      "                \"name\": \"#CUsRise\",\n",
      "                \"url\": \"http://twitter.com/search?q=%23CUsRise\",\n",
      "                \"promoted_content\": null,\n",
      "                \"query\": \"%23CUsRise\",\n",
      "                \"tweet_volume\": null\n",
      "            },\n",
      "            {\n",
      "                \"name\": \"#FallonTonight\",\n",
      "                \"url\": \"http://twitter.com/search?q=%23FallonTonight\",\n",
      "                \"promoted_content\": null,\n",
      "                \"query\": \"%23FallonTonight\",\n",
      "                \"tweet_volume\": null\n",
      "            },\n",
      "            {\n",
      "                \"name\": \"#WillAndGrace\",\n",
      "                \"url\": \"http://twitter.com/search?q=%23WillAndGrace\",\n",
      "                \"promoted_content\": null,\n",
      "                \"query\": \"%23WillAndGrace\",\n",
      "                \"tweet_volume\": null\n",
      "            },\n",
      "            {\n",
      "                \"name\": \"#ReasonsKanyeLeftPolitics\",\n",
      "                \"url\": \"http://twitter.com/search?q=%23ReasonsKanyeLeftPolitics\",\n",
      "                \"promoted_content\": null,\n",
      "                \"query\": \"%23ReasonsKanyeLeftPolitics\",\n",
      "                \"tweet_volume\": null\n",
      "            },\n",
      "            {\n",
      "                \"name\": \"#Poison\",\n",
      "                \"url\": \"http://twitter.com/search?q=%23Poison\",\n",
      "                \"promoted_content\": null,\n",
      "                \"query\": \"%23Poison\",\n",
      "                \"tweet_volume\": null\n",
      "            },\n",
      "            {\n",
      "                \"name\": \"#PDCam\",\n",
      "                \"url\": \"http://twitter.com/search?q=%23PDCam\",\n",
      "                \"promoted_content\": null,\n",
      "                \"query\": \"%23PDCam\",\n",
      "                \"tweet_volume\": null\n",
      "            }\n",
      "        ],\n",
      "        \"as_of\": \"2018-11-02T04:41:02Z\",\n",
      "        \"created_at\": \"2018-11-02T04:35:13Z\",\n",
      "        \"locations\": [\n",
      "            {\n",
      "                \"name\": \"San Francisco\",\n",
      "                \"woeid\": 2487956\n",
      "            }\n",
      "        ]\n",
      "    }\n",
      "]\n"
     ]
    }
   ],
   "source": [
    "# Get all (it's always 10) trending topics in San Francisco (its WOEID is 2487956)\n",
    "sfo_trends = api.trends_place(id =2487956)\n",
    "print(json.dumps(sfo_trends, indent=4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get the full list of followers of a particular user\n",
    "list_of_followers=[]\n",
    "\n",
    "current_cursor = tweepy.Cursor(api.followers_ids, screen_name=\"cocoweixu\", count=5000)\n",
    "current_followers = current_cursor.iterator.next()\n",
    "list_of_followers.extend(current_followers)\n",
    "next_cursor_id = current_cursor.iterator.next_cursor\n",
    "\n",
    "while(next_cursor_id!=0):\n",
    "\tcurrent_cursor = tweepy.Cursor(self.api.followers_ids, screen_name=\"cocoweixu\", count=5000,cursor=next_cursor_id)\n",
    "\tcurrent_followers=current_cursor.iterator.next()\n",
    "\tlist_of_followers.extend(current_followers)\n",
    "\tnext_cursor_id = current_cursor.iterator.next_cursor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get a particular user's timeline (up to 200 of his/her most recent tweets)\n",
    "status_cursor = tweepy.Cursor(api.user_timeline, screen_name=\"billybob\", count=200,tweet_mode='extended')\n",
    "status_list = status_cursor .iterator.next()\n",
    "# Status is list of Status object. We can extract the json format of the status as follows)\n",
    "for status in status_list:\n",
    "    print(status._json)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "api.rate_limit_status()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "application quota remianing:  165\n"
     ]
    }
   ],
   "source": [
    "print(\"application quota remianing: \",api.rate_limit_status()['resources']['application']['/application/rate_limit_status']['remaining'])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
